package com.textiletryon.repository;

import com.textiletryon.model.TryonResult;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * Repository interface for TryonResult entity
 * 
 * Provides operations for managing virtual try-on results:
 * - CRUD operations for try-on results
 * - Queries by user, garment, and photo
 * - Analytics and statistics for AI model usage
 * - Performance tracking and optimization queries
 */
@Repository
public interface TryonResultRepository extends JpaRepository<TryonResult, Long> {
    
    /**
     * Find all try-on results for a specific user profile
     * @param userProfileId the ID of the user profile
     * @return list of try-on results ordered by creation date (newest first)
     */
    List<TryonResult> findByUserProfileIdOrderByCreatedAtDesc(Long userProfileId);
    
    /**
     * Find try-on results for a specific user profile with pagination
     * @param userProfileId the ID of the user profile
     * @param pageable pagination information
     * @return page of try-on results for the user
     */
    Page<TryonResult> findByUserProfileId(Long userProfileId, Pageable pageable);
    
    /**
     * Find try-on results for a specific garment
     * @param garmentId the ID of the garment
     * @return list of try-on results for the garment
     */
    List<TryonResult> findByGarmentIdOrderByCreatedAtDesc(Long garmentId);
    
    /**
     * Find try-on results using a specific user photo
     * @param userPhotoId the ID of the user photo
     * @return list of try-on results using the photo
     */
    List<TryonResult> findByUserPhotoIdOrderByCreatedAtDesc(Long userPhotoId);
    
    /**
     * Find try-on result by user profile, garment, and user photo
     * @param userProfileId the ID of the user profile
     * @param garmentId the ID of the garment
     * @param userPhotoId the ID of the user photo
     * @return Optional containing the try-on result if found
     */
    Optional<TryonResult> findByUserProfileIdAndGarmentIdAndUserPhotoId(
            Long userProfileId, Long garmentId, Long userPhotoId);
    
    /**
     * Count try-on results for a specific user profile
     * @param userProfileId the ID of the user profile
     * @return number of try-on results for the user
     */
    Long countByUserProfileId(Long userProfileId);
    
    /**
     * Count try-on results for a specific garment
     * @param garmentId the ID of the garment
     * @return number of try-on results for the garment
     */
    Long countByGarmentId(Long garmentId);
    
    /**
     * Count try-on results using a specific user photo
     * @param userPhotoId the ID of the user photo
     * @return number of try-on results using the photo
     */
    Long countByUserPhotoId(Long userPhotoId);
    
    /**
     * Find try-on results by AI model used
     * @param aiModelUsed the AI model identifier
     * @return list of try-on results generated by the specified model
     */
    List<TryonResult> findByAiModelUsedOrderByCreatedAtDesc(String aiModelUsed);
    
    /**
     * Count try-on results by AI model
     * @param aiModelUsed the AI model identifier
     * @return number of results generated by the specified model
     */
    Long countByAiModelUsed(String aiModelUsed);
    
    /**
     * Find try-on results created within a specific time range
     * @param startDate the start date
     * @param endDate the end date
     * @return list of try-on results created within the range
     */
    List<TryonResult> findByCreatedAtBetween(LocalDateTime startDate, LocalDateTime endDate);
    
    /**
     * Find recent try-on results for a user
     * @param userProfileId the ID of the user profile
     * @param days number of days to look back
     * @return list of recent try-on results
     */
    @Query("SELECT tr FROM TryonResult tr WHERE tr.userProfile.id = :userProfileId AND tr.createdAt >= CURRENT_TIMESTAMP - :days DAY ORDER BY tr.createdAt DESC")
    List<TryonResult> findRecentTryonResultsByUser(@Param("userProfileId") Long userProfileId, @Param("days") int days);
    
    /**
     * Get most popular garments based on try-on results
     * @param limit maximum number of results
     * @return list of arrays containing [garmentId, tryonCount]
     */
    @Query("SELECT tr.garment.id, COUNT(tr) FROM TryonResult tr GROUP BY tr.garment.id ORDER BY COUNT(tr) DESC")
    List<Object[]> findMostTriedOnGarments(@Param("limit") int limit);
    
    /**
     * Get AI model usage statistics
     * @return list of arrays containing [aiModel, usageCount]
     */
    @Query("SELECT tr.aiModelUsed, COUNT(tr) FROM TryonResult tr WHERE tr.aiModelUsed IS NOT NULL GROUP BY tr.aiModelUsed ORDER BY COUNT(tr) DESC")
    List<Object[]> getAIModelUsageStats();
    
    /**
     * Get try-on statistics by garment category
     * @return list of arrays containing [category, tryonCount]
     */
    @Query("SELECT g.category, COUNT(tr) FROM TryonResult tr JOIN tr.garment g GROUP BY g.category ORDER BY COUNT(tr) DESC")
    List<Object[]> getTryonStatsByCategory();
    
    /**
     * Get try-on statistics by garment color
     * @return list of arrays containing [color, tryonCount]
     */
    @Query("SELECT g.color, COUNT(tr) FROM TryonResult tr JOIN tr.garment g GROUP BY g.color ORDER BY COUNT(tr) DESC")
    List<Object[]> getTryonStatsByColor();
    
    /**
     * Find users with most try-on results
     * @param limit maximum number of results
     * @return list of arrays containing [userProfileId, tryonCount]
     */
    @Query("SELECT tr.userProfile.id, COUNT(tr) FROM TryonResult tr GROUP BY tr.userProfile.id ORDER BY COUNT(tr) DESC")
    List<Object[]> findUsersWithMostTryons(@Param("limit") int limit);
    
    /**
     * Count try-on results created today
     * @return number of try-on results created today
     */
    @Query("SELECT COUNT(tr) FROM TryonResult tr WHERE DATE(tr.createdAt) = CURRENT_DATE")
    Long countTryonResultsCreatedToday();
    
    /**
     * Count try-on results created in the last N days
     * @param days number of days to look back
     * @return number of try-on results created in the specified period
     */
    @Query("SELECT COUNT(tr) FROM TryonResult tr WHERE tr.createdAt >= CURRENT_TIMESTAMP - :days DAY")
    Long countTryonResultsCreatedInLastDays(@Param("days") int days);
    
    /**
     * Get daily try-on statistics for the last N days
     * @param days number of days to analyze
     * @return list of arrays containing [date, count]
     */
    @Query("SELECT DATE(tr.createdAt), COUNT(tr) FROM TryonResult tr WHERE tr.createdAt >= CURRENT_TIMESTAMP - :days DAY GROUP BY DATE(tr.createdAt) ORDER BY DATE(tr.createdAt)")
    List<Object[]> getDailyTryonStats(@Param("days") int days);
    
    /**
     * Get hourly try-on statistics for today (for performance monitoring)
     * @return list of arrays containing [hour, count]
     */
    @Query("SELECT HOUR(tr.createdAt), COUNT(tr) FROM TryonResult tr WHERE DATE(tr.createdAt) = CURRENT_DATE GROUP BY HOUR(tr.createdAt) ORDER BY HOUR(tr.createdAt)")
    List<Object[]> getHourlyTryonStatsToday();
    
    /**
     * Find try-on results with garment and photo details for efficient loading
     * @param userProfileId the ID of the user profile
     * @return list of try-on results with related data
     */
    @Query("SELECT tr FROM TryonResult tr JOIN FETCH tr.garment g JOIN FETCH tr.userPhoto up WHERE tr.userProfile.id = :userProfileId ORDER BY tr.createdAt DESC")
    List<TryonResult> findTryonResultsWithDetails(@Param("userProfileId") Long userProfileId);
    
    /**
     * Find orphaned try-on results (results without valid references)
     * @return list of result image URLs that may need cleanup
     */
    @Query("SELECT tr.resultImageUrl FROM TryonResult tr WHERE tr.userProfile IS NULL OR tr.garment IS NULL OR tr.userPhoto IS NULL")
    List<String> findOrphanedResultUrls();
    
    /**
     * Delete all try-on results for a specific user profile
     * @param userProfileId the ID of the user profile
     * @return number of deleted results
     */
    @Modifying
    @Transactional
    Long deleteByUserProfileId(Long userProfileId);
    
    /**
     * Delete all try-on results for a specific garment
     * @param garmentId the ID of the garment
     * @return number of deleted results
     */
    @Modifying
    @Transactional
    Long deleteByGarmentId(Long garmentId);
    
    /**
     * Delete all try-on results using a specific user photo
     * @param userPhotoId the ID of the user photo
     * @return number of deleted results
     */
    @Modifying
    @Transactional
    Long deleteByUserPhotoId(Long userPhotoId);
    
    /**
     * Delete old try-on results (older than specified days)
     * @param days number of days to keep results
     * @return number of deleted results
     */
    @Modifying
    @Transactional
    @Query("DELETE FROM TryonResult tr WHERE tr.createdAt < CURRENT_TIMESTAMP - :days DAY")
    int deleteOldTryonResults(@Param("days") int days);
    
    /**
     * Get average processing time by AI model (would need additional field)
     * @return list of arrays containing [aiModel, avgProcessingTime]
     */
    @Query("SELECT tr.aiModelUsed, COUNT(tr) FROM TryonResult tr WHERE tr.aiModelUsed IS NOT NULL GROUP BY tr.aiModelUsed")
    List<Object[]> getModelPerformanceStats();
    
    /**
     * Find duplicate try-on results (same user, garment, and photo combination)
     * @return list of duplicate try-on results
     */
    @Query("SELECT tr FROM TryonResult tr WHERE EXISTS (SELECT 1 FROM TryonResult tr2 WHERE tr2.userProfile = tr.userProfile AND tr2.garment = tr.garment AND tr2.userPhoto = tr.userPhoto AND tr2.id != tr.id)")
    List<TryonResult> findDuplicateTryonResults();
    
    /**
     * Get success rate by AI model (would need success/failure tracking)
     * @return list of arrays containing [aiModel, totalAttempts, successCount]
     */
    @Query("SELECT tr.aiModelUsed, COUNT(tr) FROM TryonResult tr WHERE tr.aiModelUsed IS NOT NULL GROUP BY tr.aiModelUsed ORDER BY tr.aiModelUsed")
    List<Object[]> getModelSuccessStats();
    
    /**
     * Find try-on results for trending garments in the last N days
     * @param days number of days to consider for trending
     * @param limit maximum number of results
     * @return list of try-on results for trending garments
     */
    @Query("SELECT tr FROM TryonResult tr WHERE tr.createdAt >= CURRENT_TIMESTAMP - :days DAY AND tr.garment.id IN (SELECT tr2.garment.id FROM TryonResult tr2 WHERE tr2.createdAt >= CURRENT_TIMESTAMP - :days DAY GROUP BY tr2.garment.id ORDER BY COUNT(tr2) DESC) ORDER BY tr.createdAt DESC")
    List<TryonResult> findTryonResultsForTrendingGarments(@Param("days") int days, @Param("limit") int limit);
}
